
//tabla users y tasks, compatible con postgresql y login con google

CREATE TABLE users (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),   -- Identificador único del usuario
  name TEXT NOT NULL,                               -- Nombre del usuario
  email TEXT UNIQUE NOT NULL,                       -- Email del usuario
  picture TEXT,                                    -- URL de la foto de perfil (Google devuelve este campo)
  password TEXT,                                   -- Contraseña (se puede dejar vacía si es login con Google)
  google_id TEXT UNIQUE,                           -- Identificador único de Google
  auth_provider TEXT DEFAULT 'local',              -- Identifica el proveedor de autenticación: 'google' o 'local'
  created_at TIMESTAMP DEFAULT now(),              -- Fecha de creación del usuario
  updated_at TIMESTAMP DEFAULT now()               -- Fecha de actualización del usuario
);

-- Agregar un índice para la búsqueda rápida por google_id
CREATE INDEX idx_google_id ON users (google_id);

CREATE TABLE tasks (
    id SERIAL PRIMARY KEY,      
    user_id UUID NOT NULL,  
    title VARCHAR(255) NOT NULL,   
    description TEXT,              
    completed BOOLEAN DEFAULT FALSE, 
    created_at TIMESTAMP DEFAULT now(),
    updated_at TIMESTAMP DEFAULT now(),
    CONSTRAINT fk_user FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);

-- TRIGGER para actualizar updated_at automáticamente
CREATE FUNCTION update_updated_at()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = now();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trigger_update_users
BEFORE UPDATE ON users
FOR EACH ROW
EXECUTE FUNCTION update_updated_at();

CREATE TRIGGER trigger_update_tasks
BEFORE UPDATE ON tasks
FOR EACH ROW
EXECUTE FUNCTION update_updated_at();



//PRUEBAS

INSERT INTO users (name, email, picture, password)
VALUES 
  ('Usuario de Prueba', 'usuario@prueba.com', 'https://www.example.com/picture.jpg', 'miContraseñaSegura123');